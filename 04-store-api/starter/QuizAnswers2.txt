1. In this lesson, you created a middleware function called asyncWrapper. Why?
The function was created to avoid repeating the same try-catch error handling code in multiple asynchronous route handlers. 
Wrapping our routes in this function allowed us to consolidate the error-handling logic into a single place and make 
the code more maintainable and follow the DRY principle.

2. Suppose that you want to make sure that both a status code and and error message are send back to the user when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:
const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
    throw new CustomAPIError(`Task with id: ${taskID} not found`, 404);
  }
  res.status(200).json({ task });
});